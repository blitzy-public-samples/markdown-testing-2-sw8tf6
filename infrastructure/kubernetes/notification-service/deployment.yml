apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  namespace: production
  labels:
    app: notification-service
    component: backend
    part-of: task-management
    version: 1.0.0
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '3003'
    prometheus.io/path: '/metrics'
    sidecar.istio.io/inject: 'true'

spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  selector:
    matchLabels:
      app: notification-service

  template:
    metadata:
      labels:
        app: notification-service
        component: backend
        part-of: task-management
        version: 1.0.0

    spec:
      serviceAccountName: notification-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000

      containers:
      - name: notification-service
        image: notification-service:1.0.0
        imagePullPolicy: Always

        ports:
        - containerPort: 3003
          name: http
          protocol: TCP
        - containerPort: 3004
          name: websocket
          protocol: TCP

        resources:
          limits:
            cpu: '500m'
            memory: '512Mi'
          requests:
            cpu: '200m'
            memory: '256Mi'

        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop: ['ALL']

        envFrom:
        - configMapRef:
            name: notification-service-config

        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3

        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: notification-templates
          mountPath: /etc/taskmanager/notification-templates
          readOnly: true
        - name: ssl-certs
          mountPath: /etc/ssl/certs
          readOnly: true

      volumes:
      - name: tmp
        emptyDir: {}
      - name: notification-templates
        configMap:
          name: notification-templates
      - name: ssl-certs
        secret:
          secretName: notification-service-ssl

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - notification-service
              topologyKey: kubernetes.io/hostname

      terminationGracePeriodSeconds: 60

      tolerations:
      - key: "node-role.kubernetes.io/backend"
        operator: "Exists"
        effect: "NoSchedule"