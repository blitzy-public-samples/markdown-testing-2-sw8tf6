apiVersion: apps/v1
kind: Deployment
metadata:
  name: project-service
  namespace: production
  labels:
    app: project-service
    tier: backend
    environment: production
    version: v1
    part-of: task-management-system
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
    deployment.kubernetes.io/revision: "1"
    sidecar.istio.io/inject: "true"
    checksum/config: ${CONFIG_CHECKSUM}

spec:
  replicas: 3
  selector:
    matchLabels:
      app: project-service
      tier: backend
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%

  template:
    metadata:
      labels:
        app: project-service
        tier: backend
        environment: production
        version: v1
    spec:
      serviceAccountName: project-service
      containers:
      - name: project-service
        image: project-service:v1
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        - containerPort: 9090
          name: grpc
          protocol: TCP
        - containerPort: 9091
          name: metrics
          protocol: TCP
        resources:
          requests:
            cpu: "200m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 30
          successThreshold: 1
        envFrom:
        - configMapRef:
            name: project-service-config
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: config-volume
          mountPath: /app/config
          readOnly: true

      volumes:
      - name: tmp
        emptyDir: {}
      - name: config-volume
        configMap:
          name: project-service-config
          
      securityContext:
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
          
      terminationGracePeriodSeconds: 60
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: project-service
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - arm64

      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: project-service